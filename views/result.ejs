<html>

<head>
    <meta charset="utf-8" />
</head>
<style>
    @font-face {
        font-family: 'sans-serif';
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
<script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script>
<script src="https://d3js.org/d3.v3.min.js"></script>
<script src="https://rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js" type="text/JavaScript"></script>
<body>
    <h1>Your Keyword : <%=data.keyword%></h1>
    <div style="float: left; width: 500px; padding:10px; height:500px" id="div_size">
        <area_pros id ="area_pros">
            <h3>:-)   Good Opinions~~ </h3>
        </area_pros>
        
    </div>
    <div style="float: left; width: 500px; padding:10px; height:500px">
        <area_cons id ="area_cons">
            <h3>:-(   Bad Opinions~~ </h3>
        </area_cons>
        
    </div>
    <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
   
    <div><p>&nbsp;</p>
    <p>&nbsp;</p>
    <pre>
      
    
    
    </pre>
    </div>
    <p>
    <h2>top 30 words</h2>
    </p>
    <div>
            <canvas id="bar-chart" width="800" height="200"></canvas>
            <canvas id="bar-chart2"  width="800" height="200"></canvas>
 
    </div>
    <script>
        //var wordLabel = []
        //var freq = []
        d3.csv('../wordCount.csv', function(texts){
            wordLabel = texts.map(function(d) {return d.text})
            freq = texts.map(function(d) {return d.frequency})
            wordLabel.shift()
            freq.shift()
            var ctx = document.getElementById("bar-chart")//.getContext('2d')
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: wordLabel,
                    datasets: [{
                        label: 'Frequency',
                        backgroundColor: "rgba(67, 116, 217,0.5)",
                        data: freq
                    }]
                },
                options: {
                    legend: { display: true },
                    title: {
                        display: true,
                        text: 'Good Sentiment tweets frequency'
                    },scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
            
            console.log('end')
        })
        d3.csv('../wordCount1.csv', function(texts){
            wordLabel = texts.map(function(d) {return d.text})
            freq = texts.map(function(d) {return d.frequency})
            wordLabel.shift()
            freq.shift()
            var ctx = document.getElementById("bar-chart2")//.getContext('2d')
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: wordLabel,
                    datasets: [{
                        label: 'Frequency',
                        backgroundColor: "rgba(240,50,50,0.5)",
                        data: freq
                    }]
                },
                options: {
                    legend: { display: true },
                    title: {
                        display: true,
                        text: 'Bad Sentiment tweets frequency'
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        })
        
    </script>

    
    <script>
        var width = 480, 
			height = 480;

        var svg = d3.select("area_pros").append("svg")
            .attr("width", width)
            .attr("height", height)
            .append('g')
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var svg2 = d3.select("area_cons").append("svg")
            .attr("width", width)
            .attr("height", height)
            .append('g')
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        d3.csv("../wordCount.csv", function (data) {
            //console.log(data)
            showCloud(data, svg, 1)
            setInterval(function(){
                 showCloud(data,svg, 1)
            },2000) 
        });
        d3.csv("../wordCount1.csv", function (data) {
            //console.log(data)
            showCloud(data, svg2, 0)
            setInterval(function(){
                 showCloud(data,svg2, 0)
            },2000) 
        });

        //console.log('=====1=====')
        //scale.linear: 선형적인 스케일로 표준화를 시킨다. 
        //domain: 데이터의 범위, 입력 크기
        //range: 표시할 범위, 출력 크기 
        //clamp: domain의 범위를 넘어간 값에 대하여 domain의 최대값으로 고정시킨다.
        wordScale = d3.scale.linear().domain([0, 100]).range([0, 150]).clamp(true);


        var color = function(d, sentiment){
            color_data = ["#B2CCFF", "#6799FF", "#4374D9", "#003399", "#002266",
                          "#FF97DC", "##FF73B8", "#E14F94", "#BD2B70", "#99074C"]
            if(sentiment==1){
                if(d.frequency < 5){return color_data[0]
                }else if(d.frequency < 10){return color_data[1]
                }else if(d.frequency < 15){return color_data[2]
                }else if(d.frequency < 20){return color_data[3]
                }else if(d.frequency < 25){return color_data[4]
                }else{return color_data[4]}
            }
            else{
                if(d.frequency < 5){return color_data[5]
                }else if(d.frequency < 10){return color_data[6]
                }else if(d.frequency < 15){return color_data[7]
                }else if(d.frequency < 20){return color_data[8]
                }else if(d.frequency < 25){return color_data[9]
                }else{return color_data[9]}
            }
            return '#B7F0B1'
        }
        
            //수정시작
            
            


        //console.log('=====2=====')


        function showCloud(data, svg_data, sent) {
            d3.layout.cloud().size([width, height])
                //클라우드 레이아웃에 데이터 전달
                .words(data)
                .rotate(function (d) {return d.text.length > 3 ? 0 : 90;})
                //스케일로 각 단어의 크기를 설정
                .fontSize(function (d) {
                    if(sent == 1){
                        return wordScale(d.frequency*5);
                    }else{
                        return wordScale(d.frequency*12);
                    }
                    
                })
                //클라우드 레이아웃을 초기화 > end이벤트 발생 > 연결된 함수 작동  
                .on("end", draw)
                .start();

            function draw(words) { 
                //console.log("==========call draw===========")
                var cloud = svg_data.selectAll("text").data(words)
                //Entering words
                cloud.enter()
                    .append("text")
                    .style("font-family", "sans-serif")
                    .style("fill", function (d) {
                        //return (d.text.length > 5 ? "#fbc280" : "#405275");
                        return color(d, sent)
                    })
                    .style("fill-opacity", .5)
                    .attr("text-anchor", "middle") 
                    .attr('font-size', function (d) {
                        return wordScale(d.frequency);
                    })
                    .text(function (d) {
                        return d.text;
                    }); 
                cloud
                    .transition()
                    .duration(600)
                    .style("font-size", function (d) {return d.size  + "px";})
                    .attr("transform", function (d) {
                        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                    })
                    .style("fill-opacity", 1); 
            }
        }
    </script>

</body>

</html>